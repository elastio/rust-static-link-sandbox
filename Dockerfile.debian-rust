# A Rust docker image which can also be used to cross-compile to MUSL for static libs
#
# Inspired by and derived from https://github.com/emk/rust-musl-builder/blob/master/Dockerfile
#
# Postgres client support removed since we don't currently need it
#
# This is the Debian bullseye-based official image, modified heavily so that it also includes
# musl libs and headers, the Rust `x86_64-linux-unknown-musl` target, and OpenSSL and zlib compiled
# from source and linked to musl.
FROM rust:1.54-bullseye

ARG OPENSSL_VERSION=1.1.1i
ARG ZLIB_VERSION=1.2.11

RUN apt-get update && apt-get install -yq \
    bash \
    build-essential \
    clang \
    cmake \
    curl \
    e2fsprogs libext2fs-dev \
    file \
    gcc g++ \
    gdb \
    git \
    graphviz \
    libpq-dev \
    libprotoc-dev protoc-gen-go \
    libsqlite3-dev \
    libssl-dev \
    libudev-dev \
    linux-libc-dev \
    musl-dev musl-tools \
    llvm llvm-dev \
    make \
    nodejs npm \
    perl \
    pkgconf \
    sudo \
    xfsprogs xfslibs-dev \
    xutils-dev \
        && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Install the sabotage LTS linux kernel headers tweaked specifically for use compiling userland and to support musl
RUN git clone https://github.com/sabotage-linux/kernel-headers.git --branch v4.19.88-1 /tmp/kernel-headers && \
    cd /tmp/kernel-headers &&  \
    make ARCH=x86_64 prefix=/usr/local/sabotage install && \
    cd / && rm -rf /tmp/kernel-headers

# Static linking for C++ code
RUN ln -s "/usr/bin/g++" "/usr/bin/musl-g++"

# todo: linux-headers-$(uname -r)

# Build a static library version of OpenSSL using musl-libc.  This is needed by
# the popular Rust `hyper` crate.
#
# We point /usr/local/musl/include/linux at some Linux kernel headers (not
# necessarily the right ones) in an effort to compile OpenSSL 1.1's "engine"
# component. It's possible that this will cause bizarre and terrible things to
# happen. There may be "sanitized" header
RUN echo "Building OpenSSL" && \
    ls /usr/include/linux && \
    mkdir -p /usr/local/musl/include && \
    ln -s /usr/include/linux /usr/local/musl/include/linux && \
    ln -s /usr/include/x86_64-linux-gnu/asm /usr/local/musl/include/asm && \
    ln -s /usr/include/asm-generic /usr/local/musl/include/asm-generic && \
    cd /tmp && \
    short_version="$(echo "$OPENSSL_VERSION" | sed s'/[a-z]$//' )" && \
    curl -fLO "https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz" || \
        curl -fLO "https://www.openssl.org/source/old/$short_version/openssl-$OPENSSL_VERSION.tar.gz" && \
    tar xzf "openssl-$OPENSSL_VERSION.tar.gz" && cd "openssl-$OPENSSL_VERSION" && \
    env CC=musl-gcc ./Configure no-shared no-zlib -fPIC --prefix=/usr/local/musl -DOPENSSL_NO_SECURE_MEMORY linux-x86_64 && \
    env C_INCLUDE_PATH=/usr/local/musl/include/ make depend && \
    env C_INCLUDE_PATH=/usr/local/musl/include/ make && \
    make install && \
    rm /usr/local/musl/include/linux /usr/local/musl/include/asm /usr/local/musl/include/asm-generic && \
    rm -r /tmp/*

RUN echo "Building zlib" && \
    cd /tmp && \
    curl -fLO "http://zlib.net/zlib-$ZLIB_VERSION.tar.gz" && \
    tar xzf "zlib-$ZLIB_VERSION.tar.gz" && cd "zlib-$ZLIB_VERSION" && \
    CC=musl-gcc ./configure --static --prefix=/usr/local/musl && \
    make && make install && \
    rm -r /tmp/*

RUN rustup component add rustfmt && \
    rustup component add clippy && \
    rustup target add x86_64-unknown-linux-musl

# Set up our environment variables so that builds targeting musl can find the
# right version of the libs.
#
# Note that unlike `rust-musl-builder` this does not make musl the default target
ENV X86_64_UNKNOWN_LINUX_MUSL_OPENSSL_DIR=/usr/local/musl/ \
    X86_64_UNKNOWN_LINUX_MUSL_OPENSSL_STATIC=1
#     PKG_CONFIG_ALLOW_CROSS=true \
#     PKG_CONFIG_ALL_STATIC=true \
#     LIBZ_SYS_STATIC=1 \
#     TARGET=musl